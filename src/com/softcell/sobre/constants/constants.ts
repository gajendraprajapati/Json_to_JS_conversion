export const CONSTANTS = {
    CREDIT_RULE: "CREDIT_RULE",
    CUSTOM_FIELD: "CUSTOM_FIELD",
    ANALYTICAL_FIELDS:"ANALYTICAL_FIELDS",
    GLOBAL_VAR: "global.variables",
    SCORING: "SCORING",
    RULE_NAME: "RULE_NAME",
    DLOAN_AMOUNT: "loanReqObj.REQUEST.oReq.oApplication.dLoanAmt",
    NA: "NA",
    NULL: "null",
    CRITERIA_NAME: "CRITERIA_NAME",
    ADDITIONAL_SCORECARDS: "ADDITIONAL_SCORECARDS",
    MATCHING_FILED_NAME: "MATCHING_FILED_NAME",
    DIFF_MONTH: "diff-month",
    DIFF_DAYS: "diff-days",
    DIFF_MONTH_RECENT: "diff-month-recent",
    MIN_DIFF_DAYS: "MIN-DIFF-DAYS",
    MAX_DIFF_DAYS: "MAX-DIFF-DAYS",
    MAX_DIFF_MONTH: "MAX-DIFF-MONTH",
    MIN_DIFF_MONTH: "MIN-DIFF-MONTH",
    PARSE_FLOAT: "parseFloat",
    TRADE: "trade",
    DEVIATION_RESPONSE:"DEVIATION_RESPONSE",
    FOR_EACH: "FOR_EACH",
    STATEMENT: "STATEMENT",
    FUNCTION: "FUNCTION",
    SIMPLE_OPERATION: "SIMPLE_OPERATION",
    INTERSECTION_OPERATION: "INTERSECTION_OPERATION",
    INTERSECTION_OPERATION_MULTI_ARRAY: "INTERSECTION_OPERATION_MULTI_ARRAY",
    ARRAY_THREE_DIGIT_NUMERIC_STRING_TO_NUMBERS_OPERATION: "ARRAY_THREE_DIGIT_NUMERIC_STRING_TO_NUMBERS_OPERATION",
    ARRAY_THREE_DIGIT_DATE_TO_DATE_OPERATION: "ARRAY_THREE_DIGIT_DATE_TO_DATE_OPERATION",
    CONVERT_THREE_DIGIT_NUMBER_STRING_TO_NUMBER: "convertThreeDigitNumericStringToNumbers",
    STRING_OPERATION: "STRING_OPERATION",
    NUMBER_OPERATION: "NUMBER_OPERATION",
    DATE_OPERATION: "DATE_OPERATION",
    PAYMENT_HIST_START_DATE: "paymentHistoryStartDate",
    MUTUAL_EXCLUSIVE_EXPRESSIONS: "MUTUAL_EXCLUSIVE_EXPRESSIONS",
    ASSIGN_AND_RETURN: "ASSIGN_AND_RETURN",
    IF_COND: "IF_COND",
    IF_ASSIGN_COND: "IF_ASSIGN_COND",
    FIELD: "field",
    VALUE: "value",
    DPD_DAYS_DIFFERENCE: 15,
    ELIGIBILITY_RESPONSE : "ELIGIBILITY_RESPONSE",
    AGGREGATE: "AGGREGATE",
    loanInput: "loanReqObj",    // Loan request Object
    loanOutput: "loanResObj",   // Loan response Object
    DERIVED_FIELDS: "DERIVED_FIELDS",   // Loan response Object
    FINANCIAL_FIELDS: "FINANCIAL_FIELDS",
    CALCULATED_FIELDS: "CALCULATED_FIELDS",
    CUSTOM_FIELDS: "CUSTOM_FIELDS",
    MATCHING_FIELDS: "MATCHING_FIELDS",
    WORKFLOW_FIELDS: "WORKFLOW_FIELDS",
    IRP: "IRP",
    ARRAY_OPERATION: "ARRAY_OPERATION",
    REQUEST: "REQUEST",
    MASTER_STRUCTURE: "MASTER STRUCTURE",
    CUSTOM: "CUSTOM",
    FINANCIAL: "FINANCIAL",
    MATCHING: "MATCHING",
    ANALYTICAL: "ANALYTICAL",
    ADDITIONAL_ELIGIBILITY : "ADDITIONAL_ELIGIBILITY",
    IFF_STRUCTURE: "IFF STRUCTURE",
    DATE_FROMAT1: "DD:MM:YYYY",
    DATE_FROMAT2: "DDMMYYYY",
    MULTI_ARRAY_OPERATION : "MULTI_ARRAY_OPERATION",
    FINAL_DECISION : "finalDecision",
    NULL_OR_VALUE: "nullOrValue",
    dpdOutcome: {MAX_DPD_VAL: "MAX-DPD-VAL", MIN_DPD_VAL: "MIN-DPD-VAL", COUNT_DPD_VAL: "COUNT-DPD-VAL", MAX_DPD_DATE: "MAX-DPD-DATE", MIN_DPD_DATE: "MIN-DPD-DATE", SUM_DPD_VAL: "SUM-DPD-VAL", VALUE_OF: "VALUE-OF"},
    outcomeType: {VALUE: "Value", PRESENT_VAL: "PresentVal", FIELD: "Field", RATIO: "Ratio", DIFFERENCE: "Difference", ADDITION: "+", MULTIPLICATION: "*", DIVISION: "/"    }, // custom field outcome type
    scoringBaseOperator: {ADDITION: "+", DIFFERENCE: "-", MULTIPLICATION: "*", DIVISION: "/", Exp: "Exp", Exp1: "Exp1" , YCMX: "y=(c+mx)", ESCORE: "1/(1+e^score)", ESCORE1: "1/(1+e^-score)"}, // scoring base operations
    types: {STRING: "string", INTEGER: "number", BOOLEAN: "boolean", DATE: "date", DPD: "dpd", CUSTOM: "custom", OBJECT: "object", ARRAY: "array", ANY: "any"},   // supported data types
    operators: {PUSH: "push", ZIP: "zip", CONCAT: "concat", SIZE: "size", EVERY: "every", SOME: "some", NOT_BETWEEN: "notInRange", EQUAL: "isEqual", NOT_EQUAL: "notEqual", FILTER: "filter", MAP: "map", FLATMAP: "flatMap", FIND: "find", AND: "&&", OR: "||", INTERSECTION: "intersection", UNION: "union", VALUE_OF: "VALUE-OF"}, // supported operators
    stringOperators: {COUNT: "size", COUNT_DIST: "sizeDistinct", INCLUDES: "includesWithoutCase", NOT_INCLUDES: "notIncludes", ENDS_WITH: "endsWith", STARTS_WITH: "startsWith", EQUAL: "isStrEqual", NOT_EQUAL: "isStrNotEqual"}, // supported operators
    numberOperators: {BETWEEN: "inRange", NOT_BETWEEN: "notInRange", MAX: "maxNum", MIN: "minNum", COUNT_DIST: "sizeDistinct", COUNT: "size", SUM_BY: "sumBy", AVERAGE: "mean", DIVISION:"division"}, // supported operators
    dateOperators: {BETWEEN: "dateInRange", NOT_BETWEEN: "dateNotInRange", EQUAL: "dateEqual", NOT_EQUAL: "dateNotEqual", DIFF_DAYS: "dateDiffDays", DIFF_MONTHS: "dateDiffMonth", MAX_BY: "maxBy", MIN_BY: "minBy", MIN: "minNum", MAX: "maxNum", COUNT: "size", COUNT_DIST: "sizeDistinct", BEFORE: "dateIsBefore", AFTER: "dateIsAfter", MAX_GAP_MONTHS: "maxGapMonths", MIN_GAP_MONTHS: "minGapMonths", MAX_GAP_DAYS: "maxGapDays", MIN_GAP_DAYS: "minGapDays"}, // supported operators
};
